{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>home workflow template buddhism</p> <p>cheatsheets</p>","tags":["instructions","javascript","python"]},{"location":"#random-island-adventure","title":"random island adventure","text":"<p>this is a retro game I play with to practice python and javascript</p>","tags":["instructions","javascript","python"]},{"location":"#instructions","title":"instructions","text":"<ul> <li>find the treasure, avoid the disaster and don't starve</li> </ul>","tags":["instructions","javascript","python"]},{"location":"#movement","title":"movement","text":"<ul> <li><code>hjkl</code> = <code>\u2190 \u2193 \u2191 \u2192</code>1</li> </ul>","tags":["instructions","javascript","python"]},{"location":"#tips-cheats","title":"tips &amp; cheats","text":"<ul> <li>read the tips in game for more survival tips</li> </ul> <p>play random island adventure online</p> <p>download the python terminal app</p>","tags":["instructions","javascript","python"]},{"location":"#javascript","title":"javascript","text":"<ul> <li>javascript</li> <li>javascript others</li> </ul>","tags":["instructions","javascript","python"]},{"location":"#python","title":"python","text":"<ul> <li>python</li> </ul> <ol> <li> <p>vim arrows since 1976, before the mouse was invented (slowing down human progress forever)\u00a0\u21a9</p> </li> </ol>","tags":["instructions","javascript","python"]},{"location":"js/","title":"javascript","text":"<p>a single page application using plain js and bootstrap</p> <p>this was my homework for the js &amp; bootstrap front end course portfolio project</p>","tags":["javascript"]},{"location":"js/#cartesian-coordinates","title":"cartesian coordinates","text":"<ul> <li>my first task was making canvas use cartesian coordinates with <code>0,0</code> in the CENTER1</li> <li>canvas by default starts <code>0,0</code> at the top left</li> <li>my original python version had <code>0,0</code> in the center, I didn't want to monkey around so I moved it</li> <li>this line translates the <code>0,0</code> to the center</li> </ul> <pre><code>ctx.translate(200, 201);\n</code></pre>","tags":["javascript"]},{"location":"js/#what-makes-the-adventure-random","title":"what makes the adventure random?","text":"<ul> <li>the treasure, and every item on an island gets dropped in a random location each game</li> </ul> <pre><code>generateCoordinate() {\nlet randoX = Math.floor(Math.random() * (this.eastBoundry - this.westBoundry + 1) + this.westBoundry)\nlet randoY = Math.floor(Math.random() * (this.northBoundry - this.southBoundry + 1) + this.southBoundry)\nlet coordinate = [randoX, randoY]\nwhile (this.validateCoordinate(coordinate)) {\nlet randoX = Math.floor(Math.random() * (this.eastBoundry - this.westBoundry + 1) + this.westBoundry)\nlet randoY = Math.floor(Math.random() * (this.northBoundry - this.southBoundry + 1) + this.southBoundry)\ncoordinate = [randoX, randoY]\n}\nreturn coordinate\n}\n</code></pre>","tags":["javascript"]},{"location":"js/#islands","title":"islands","text":"<ul> <li>it would not be random island adenture without islands</li> <li>the island is a class</li> <li>I was planning to add levels so if you win you could build a boat and travel to a bigger island</li> <li>then I realized it would be easier to maintain the code with seperate spa(s)</li> <li>copy <code>ria.html</code> and if the player wins you provide a link to <code>ria_level_2.html</code> etc.</li> <li>I was thinking I might adjust nsew boundaries so islands could be different sizes, but haven't finished implementing it</li> </ul> <pre><code>class island {\nconstructor(islandName, x_max, y_max) {\nthis.islandName = islandName\nthis.northBoundry = y_max\nthis.southBoundry = -y_max\nthis.westBoundry = -x_max\nthis.eastBoundry = x_max\nthis.usedCoordinates = [] // each island has a set of used coordinates\n}\n</code></pre>","tags":["javascript"]},{"location":"js/#use-coordinates","title":"use coordinates","text":"<ul> <li><code>this.usedCoordinates</code> is where you can store objects like the treasure, disaster, fruit trees, etc.</li> <li>that provides a way to make sure you're not dropping random items on the same coordinate</li> </ul> <pre><code>useCoordinate(coordinate) {\nthis.usedCoordinates.push(coordinate)\n}\nvalidateCoordinate(coordinate) {\n// returns true if coordinate is already used\nconst validation = JSON.stringify(this.usedCoordinates).includes(JSON.stringify(coordinate));\nreturn validation\n}\n</code></pre>","tags":["javascript"]},{"location":"js/#movement","title":"movement","text":"<ul> <li>you lose 1 energy when you move, if you run out of energy you lose</li> </ul> <pre><code>commonMovement() {\nplayerOne.adjustEnergy(-1)\n</code></pre>","tags":["javascript"]},{"location":"js/#keyboard-shortcuts","title":"keyboard shortcuts","text":"<ul> <li>if you want to be evil, you can change the keyboard shortcuts</li> <li>to something lame like actual arrows or wasd</li> <li>later in life you will learn vim, and you will look back on this day and regret not learning it now</li> </ul> <pre><code>function checkKey(e) {\nrandoMessage(chipDiamond)\n// console.log(e.keyCode);\nswitch (e.keyCode) {\ncase 72:\n// case 37:\nplayerOne.moveWest()\nbreak;\ncase 75:\n// case 38:\nplayerOne.moveNorth()\nbreak;\ncase 76:\n// case 39:\nplayerOne.moveEast()\nbreak;\ncase 74:\n// case 40:\nplayerOne.moveSouth()\nbreak;\n}\n}\n</code></pre>","tags":["javascript"]},{"location":"js/#adding-boundaries-for-the-ocean","title":"adding boundaries for the ocean","text":"<ul> <li>you don't want to walk into the ocean and drown</li> <li>or maybe you're an evil game designer or like hard mode</li> <li>you could have bountaries cause the player to be eaten by sharks, stabbed by manta rays, or poisoned by jellyfish here</li> <li>or maybe drop an npc that gives your character scuba gear so they can find even more treasures</li> </ul> <pre><code>checkBorders(coordinate) {\n// true means you can move\nif (coordinate[1] &gt; this.northBoundry)\nreturn true\nelse if (coordinate[1] &lt; this.southBoundry)\nreturn true\nelse if (coordinate[0] &lt; this.westBoundry)\nreturn true\nelse if (coordinate[0] &gt; this.eastBoundry)\nreturn true\nelse\nreturn false\nconsole.log('boundry check ok');\n}\n</code></pre>","tags":["javascript"]},{"location":"js/#game-conditions","title":"game conditions","text":"<ul> <li>a minimal game has conditions for win or lose</li> <li>this drops a random treasure and disaster</li> <li>there is a 2nd lose scenario if you run out of energy</li> </ul> <pre><code>let treasureLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(treasureLocation)\nconst treasure = new Point('treasure', 'islandOne', [treasureLocation[0], treasureLocation[1]], 0);\nlet disasterLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(disasterLocation)\nconst disaster = new Point('disaster', 'islandOne', [disasterLocation[0], disasterLocation[1]], 0);\n</code></pre>","tags":["javascript"]},{"location":"js/#losing-energy-and-food-trees","title":"losing energy and food trees","text":"<ul> <li>when you move you lose energy, this is another lose scenario</li> <li>finding a fruit tree gives you enerty</li> <li>you can cheat by revisiting a fruit tree to pump your energy up to infinity</li> <li>I might add a death by overeating option to break that cheat</li> <li>or drop a backpack allowing you to carry some food</li> <li> <p>or have trees turn rotton over time and become poisonous, increasing energy drops or other evil effects</p> </li> <li> <p>fruit</p> </li> </ul> <pre><code>const fruit = ['banana', 'orange', 'pear', 'apple', 'almond', 'coconut', 'pineapple', 'cherry']\nconst fruitDropLocations = []\nfor (f of fruit) {\nconst fruitLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(fruitLocation)\nlet fruitDropName = f + \"Drop\"\nfruitDropName = new Point(f, 'islandOne', [fruitLocation[0], fruitLocation[1]], 0)\nfruitDropLocations.push([fruitLocation[0], fruitLocation[1]])\n}\n</code></pre> <ul> <li>fruit map</li> </ul> <pre><code>let fruitMapLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(fruitMapLocation)\nconst fruitMap = new Point('fruitMap', 'islandOne', [fruitMapLocation[0], fruitMapLocation[1]], 0)\n</code></pre>","tags":["javascript"]},{"location":"js/#all-of-the-code","title":"all of the code","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Player&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootswatch@4.5.2/dist/solar/bootstrap.min.css\"\nintegrity=\"sha384-NCwXci5f5ZqlDw+m7FwZSAwboa0svoPPylIW3Nf+GBDsyVum+yArYnaFLE9UDzLd\" crossorigin=\"anonymous\"&gt;\n&lt;style&gt;\ncanvas {\n/* #586e75 #002b36; */\nborder: 2px solid #268bd2;\nbackground-color: #586e75;\nborder-radius: 5px;\npadding-top: 10px;\n}\nh1 {\ncolor: #268bd2;\n}\nh3 {\ncolor: #cb4b16;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container\"&gt;\n&lt;div class=\"row\"&gt;\n&lt;div class=\"col-3\"&gt;\n&lt;br&gt;\n&lt;div id=\"narration\" class=\"alert alert-primary\" role=\"alert\"&gt;\n&lt;/div&gt;\n&lt;hr&gt;\n&lt;h3&gt;energy&lt;/h3&gt;\n&lt;div class=\"progress\"&gt;\n&lt;div id='energyBar' class=\"progress-bar bg-warning\" role=\"progressbar\" aria-label=\"\"\nstyle=\"width: 25%;\" aria-valuemin=\"0\" aria-valuemax=\"100\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"col-6\"&gt;\n&lt;h1&gt;random island adventure&lt;/h1&gt;\n&lt;canvas id=\"canvas\" width=\"430\" height=\"430\"&gt;\n&lt;/div&gt;\n&lt;div class=\"col-3\"&gt;\n&lt;div class=\"alert alert-info\" id=\"island\"&gt;\n&lt;/div&gt;\n&lt;br&gt;\n&lt;div class=\"alert alert-secondary\" id=\"notification\"&gt;\n&lt;/div&gt;\n&lt;hr&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\nwindow.onload = function () {\nvar c = document.getElementById('canvas');\nvar ctx = c.getContext('2d');\n// Center\nctx.translate(200, 201);\nfunction drawCartesianPoint(ctx, x, y) {\nctx.fillRect(x, -(y), 4, 4);\n}\nfunction drawCartesianText(ctx, x, y, text) {\nctx.fillText(text, x, -(y));\n}\nclass island {\nconstructor(islandName, x_max, y_max) {\nthis.islandName = islandName\nthis.northBoundry = y_max\nthis.southBoundry = -y_max\nthis.westBoundry = -x_max\nthis.eastBoundry = x_max\nthis.usedCoordinates = [] // each island has a set of used coordinates\n}\nuseCoordinate(coordinate) {\nthis.usedCoordinates.push(coordinate)\n}\nvalidateCoordinate(coordinate) {\n// returns true if coordinate is already used\nconst validation = JSON.stringify(this.usedCoordinates).includes(JSON.stringify(coordinate));\nreturn validation\n}\ngenerateCoordinate() {\nlet randoX = Math.floor(Math.random() * (this.eastBoundry - this.westBoundry + 1) + this.westBoundry)\nlet randoY = Math.floor(Math.random() * (this.northBoundry - this.southBoundry + 1) + this.southBoundry)\nlet coordinate = [randoX, randoY]\nwhile (this.validateCoordinate(coordinate)) {\nlet randoX = Math.floor(Math.random() * (this.eastBoundry - this.westBoundry + 1) + this.westBoundry)\nlet randoY = Math.floor(Math.random() * (this.northBoundry - this.southBoundry + 1) + this.southBoundry)\ncoordinate = [randoX, randoY]\n}\nreturn coordinate\n}\nshowCoordinates() {\nconsole.log(this.usedCoordinates)\n}\ncheckBorders(coordinate) {\n// true means you can move\nif (coordinate[1] &gt; this.northBoundry)\nreturn true\nelse if (coordinate[1] &lt; this.southBoundry)\nreturn true\nelse if (coordinate[0] &lt; this.westBoundry)\nreturn true\nelse if (coordinate[0] &gt; this.eastBoundry)\nreturn true\nelse\nreturn false\nconsole.log('boundry check ok');\n}\n}\nclass Point {\nstatic allPoints = [];\nconstructor(userName, islandName, coordinate, energy) {\nthis.userName = userName;\nthis.energy = energy;\nthis.islandName = islandName;\nthis.coordinate = coordinate\nPoint.allPoints.push(this);\n}\nupdateEnergyBar(amount) {\nconst energyBar = document.getElementById('energyBar')\nenergyBar.setAttribute('aria-valuenow', '100')\nenergyBar.style.width = amount + '%';\nenergyBar.innerHTML = `% ${amount}`\n}\nadjustEnergy(amount) {\nthis.energy = this.energy + amount\nthis.updateEnergyBar(this.energy)\n}\nsomethingIsHere(coordinate) {\nconst whoIsThat = JSON.stringify(Point.allPoints).includes(JSON.stringify(coordinate));\nreturn whoIsThat\n}\nupdateNarration(text) {\nconst narrationBox = document.getElementById('narration')\nnarrationBox.innerHTML = text\n}\ncommonMovement() {\nplayerOne.adjustEnergy(-1)\nif (this.energy == 0) {\nupdateInterface(`you cannot move, energy level ${this.energy}`)\nalert(`you cannot move, energy level ${this.energy}`)\nlocation.reload()\n}\nupdateInterface(`moving ${this.userName} to ${this.coordinate} &lt;br&gt; energy level ${this.energy}`)\ndrawCartesianText(ctx, this.coordinate[0] * 20, this.coordinate[1] * 20, '*')\nif (islandOne.validateCoordinate(this.coordinate)) {\nfor (let item of Point.allPoints) {\nif (JSON.stringify(item).includes(JSON.stringify(this.coordinate))) {\nif (item.coordinate == this.coordinate) {\nthis.updateNarration(`${this.userName} you went backwards`)\n} else if (item.userName == 'treasure') {\nthis.updateNarration(`YOU WON!  YOU FOUND THE THE ${item.userName}`)\nalert(`you won!  you found the the ${item.userName}`)\nlocation.reload()\n} else if (item.userName == 'disaster') {\nthis.updateNarration(`you lose, found the ${item.userName}`)\nalert(`you lose, found the ${item.userName}`)\nlocation.reload()\n} else if (item.userName == 'treasureMap') {\nupdateNotification(`you found the ${item.userName} `)\ndrawCartesianText(ctx, treasure.coordinate[0] * 20, treasure.coordinate[1] * 20, 'T')\n} else if (item.userName == 'disasterMap') {\nupdateNotification(`you found the ${item.userName} `)\ndrawCartesianText(ctx, disaster.coordinate[0] * 20, disaster.coordinate[1] * 20, 'D')\n} else if (item.userName == 'fruitMap') {\nupdateNotification(`you found the ${item.userName} `)\nfor (f of fruitDropLocations) {\ndrawCartesianText(ctx, f[0] * 20, f[1] * 20, 'F')\n}\n} else {\nupdateNotification(`you found a ${item.userName} tree`)\nplayerOne.adjustEnergy(10)\n}\n}\n}\n}\n}\nmoveNorth() {\nthis.coordinate = [this.coordinate[0], this.coordinate[1] += 1]\nif (islandOne.checkBorders(this.coordinate)) {\nupdateInterface('you reached the north beach')\nthis.coordinate = [this.coordinate[0], this.coordinate[1] -= 1]\n} else {\nthis.commonMovement()\n}\n}\nmoveSouth() {\nthis.coordinate[1] -= 1\nif (islandOne.checkBorders(this.coordinate)) {\nupdateInterface('you reached the south beach')\nthis.coordinate[1] += 1\n} else {\nthis.commonMovement()\n}\n}\nmoveWest() {\nthis.coordinate[0] -= 1\nif (islandOne.checkBorders(this.coordinate)) {\nupdateInterface('you reached the west beach')\nthis.coordinate[0] += 1\n} else {\nthis.commonMovement()\n}\n}\nmoveEast() {\nthis.coordinate[0] += 1\nif (islandOne.checkBorders(this.coordinate)) {\nupdateInterface('you reached the east beach')\nthis.coordinate[0] -= 1\n} else {\nthis.commonMovement()\n}\n}\n}\nfunction checkKey(e) {\nrandoMessage(chipDiamond)\n// console.log(e.keyCode);\nswitch (e.keyCode) {\ncase 72:\n// case 37:\nplayerOne.moveWest()\nbreak;\ncase 75:\n// case 38:\nplayerOne.moveNorth()\nbreak;\ncase 76:\n// case 39:\nplayerOne.moveEast()\nbreak;\ncase 74:\n// case 40:\nplayerOne.moveSouth()\nbreak;\n}\n}\n// chipDiamond = ['look at THIS', 'LOOK AT THAT', 'just look at it', 'would you look at this', 'well just look at it']\nchipDiamond = ['watch out for disasters', 'find the treasure to win', 'fruit gives you energy', 'run out of energy and you lose', 'find the disaster map', 'there is a treasure map', 'find the fruit map']\nfunction randoMessage(narrations) {\nvar narrate = narrations[Math.floor(Math.random() * narrations.length)];\nplayerOne.updateNarration(narrate)\n}\nfunction updateInterface(message) {\nconst islandDisplay = document.getElementById('island')\nislandDisplay.innerHTML = message\n}\nfunction updateNotification(message) {\nconst islandDisplay = document.getElementById('notification')\nislandDisplay.innerHTML = message\n}\nfunction updateIsland(x, y, message) {\ndrawCartesianText(ctx, x, y, message)\n}\ndocument.onkeydown = checkKey;\nconst islandOne = new island('islandOne', 10, 10)\nconst playerOne = new Point('player_one', 'islandOne', [0, 0], 100);\nislandOne.useCoordinate([0, 0])\nlet narrate = welcome = \"hi I'm Chip Daimond I'll narrate your game, LOOK AT THAT! you woke up hungover on this random island - use hjkl to explore, hopefully you find the treasure not the disaster...\"\nplayerOne.updateNarration(narrate)\nupdateInterface('starting at location 0,0')\nplayerOne.updateEnergyBar(playerOne.energy)\ndrawCartesianText(ctx, 0, 0, '*')\nlet treasureLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(treasureLocation)\nconst treasure = new Point('treasure', 'islandOne', [treasureLocation[0], treasureLocation[1]], 0);\n// console.log(treasureLocation[0], treasureLocation[1], 'treasure')\n// drawCartesianText(ctx, treasureLocation[0] * 20, treasureLocation[1] * 20, 'treasure')\nlet disasterLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(disasterLocation)\nconst disaster = new Point('disaster', 'islandOne', [disasterLocation[0], disasterLocation[1]], 0);\n// console.log(disasterLocation[0], disasterLocation[1], 'disaster')\n// drawCartesianText(ctx, disasterLocation[0] * 20, disasterLocation[1] * 20, 'disaster')\nlet treasureMapLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(treasureMapLocation)\nconst treasureMap = new Point('treasureMap', 'islandOne', [treasureMapLocation[0], treasureMapLocation[1]], 0);\nlet disasterMapLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(disasterMapLocation)\nconst disasterMap = new Point('disasterMap', 'islandOne', [disasterMapLocation[0], disasterMapLocation[1]], 0);\nlet fruitMapLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(fruitMapLocation)\nconst fruitMap = new Point('fruitMap', 'islandOne', [fruitMapLocation[0], fruitMapLocation[1]], 0)\nconst fruit = ['banana', 'orange', 'pear', 'apple', 'almond', 'coconut', 'pineapple', 'cherry']\nconst fruitDropLocations = []\nfor (f of fruit) {\nconst fruitLocation = islandOne.generateCoordinate()\nislandOne.useCoordinate(fruitLocation)\nlet fruitDropName = f + \"Drop\"\nfruitDropName = new Point(f, 'islandOne', [fruitLocation[0], fruitLocation[1]], 0)\nfruitDropLocations.push([fruitLocation[0], fruitLocation[1]])\n}\nfunction cheat() {\nfor (p of Point.allPoints) {\nconsole.log(p.userName, p.coordinate[0], p.coordinate[1])\n}\nconsole.log(fruitDropLocations)\n}\n};\n&lt;/script&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js\"\nintegrity=\"sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK\"\ncrossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["javascript"]},{"location":"js/#react","title":"react","text":"<p>wip: I'm currently on the full stack js course</p> <p>I haven't started react native which is for mobile</p> <p>I might branch this and add react</p> <ol> <li> <p>https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \u21a9</p> </li> </ol>","tags":["javascript"]},{"location":"js_other/","title":"javascript others","text":"<p>random person</p> <ul> <li>this is a widget we use in meetings</li> <li>it picks someone at random then checks their name off the list</li> <li>you can uncheck the names of people that are not at the meeting</li> <li>use it for picking who goes next while giving updates or whatever</li> </ul>","tags":["javascript"]},{"location":"python/","title":"python","text":"<p>this is a retro game you play in the terminal</p> <p>download python code</p> <p>or clone it</p> <pre><code>git clone https://github.com/shane0/adventure\n</code></pre>","tags":["python"]},{"location":"python/#when-this-started","title":"when this started","text":"<p>I made this retro game for the portfolio project assignment in the nucamp back end devops bootcamp</p> <p>this was the first version of random island adventure</p> <p>it is a python app played in the terminal</p> <p>this was for the nucamp back end devops course portfolio projects</p>","tags":["python"]},{"location":"python/#code-layout","title":"code layout","text":"<pre><code>\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 mods\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 disasters.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 map.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 narrate.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 npc.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 player.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 treasure.py\n\u2514\u2500\u2500 readme.md\n</code></pre>","tags":["python"]},{"location":"python/#mainpy","title":"<code>main.py</code>","text":"<ul> <li>this is how you code when you're a noob</li> <li>this file is a hot mess but it works</li> <li>it does way too much</li> <li>maybe I'll explain it if I ever clean it up :)</li> </ul>","tags":["python"]},{"location":"python/#modsmappy","title":"<code>mods/map.py</code>","text":"<ul> <li>to start with an island...</li> <li>I made a \"map\", ironically I wanted to practice using the python built in type <code>map</code>1</li> <li>this could be reused to create a space for any cartesian based game</li> <li>it allows you to move north, south, east and west</li> </ul> <pre><code># map\ndef home():\nx, y = 0, 0\npoint = (x, y)\nreturn point\ndef north(point):\n\"\"\"move north\"\"\"\ny = point[1] + 1\npoint = (point[0], y)\nreturn point\ndef south(point):\n\"\"\"move south\"\"\"\ny = point[1] - 1\npoint = (point[0], y)\nreturn point\ndef east(point):\n\"\"\"move east\"\"\"\nx = point[0] + 1\npoint = (x, point[1])\nreturn point\ndef west(point):\n\"\"\"move west\"\"\"\nx = point[0] - 1\npoint = (x, point[1])\nreturn point\n</code></pre>","tags":["python"]},{"location":"python/#boundaries","title":"boundaries","text":"<ul> <li>the map is infinite</li> <li>this code added borders for north, south, east and west</li> </ul> <pre><code>def check_boundry(x, y):\n\"\"\"check if x or y are off the map\"\"\"\nif x in range(-2, 3) and y in range(-2, 3):\nreturn 0\nelif x &gt; 2:\ntext = \"you REACHED THE OCEAN and cannot move further east\"\nreturn text\nelif x &lt; -2:\ntext = \"you REACHED THE OCEAN and cannot move further west\"\nreturn text\nelif y &gt; 2:\ntext = \"you REACHED THE OCEAN and cannot move further north\"\nreturn text\nelif y &lt; -2:\ntext = \"you REACHED THE OCEAN and cannot move further south\"\nreturn text\n</code></pre>","tags":["python"]},{"location":"python/#drawing-the-map-compass-feature","title":"drawing the map (compass feature)","text":"<ul> <li>later I added a compass that reveals the map</li> <li>this draws the draw a map</li> <li>this also provided a visual way to debug during development</li> </ul> <pre><code>def draw_row(coordinate, column):\ndrawing = \"\"\nfor x in range(-2, 3):\nif coordinate[0] == x and coordinate[1] == column:\ndrawing += \" X\"\nelse:\ndrawing += \" .\"\nreturn drawing\ndef draw_grid(coordinate):\nfor x in \"abcde\":\nif x == \"a\":\nprint(draw_row(coordinate, 2))\nelif x == \"b\":\nprint(draw_row(coordinate, 1))\nelif x == \"c\":\nprint(draw_row(coordinate, 0))\nelif x == \"d\":\nprint(draw_row(coordinate, -1))\nelif x == \"e\":\nprint(draw_row(coordinate, -2))\n</code></pre>","tags":["python"]},{"location":"python/#map-coordinate-stack2","title":"map coordinate stack2","text":"<ul> <li>to make this a random island adventure, a treasure and disaster gets dropped on the map</li> <li>it was possible that they both land on the same location</li> <li>or even land on <code>0,0</code> where the player starts</li> <li>so I created a stack to store and validate used coordinates</li> </ul> <pre><code>class UsedCoordinates:\ndef __init__(self):\nself.items = []\ndef size(self):\nreturn len(self.items)\ndef use(self, item):\nself.items.append(item)\ndef remove(self):\nif self.size() == 0:\nreturn None\nreturn self.items.pop(0)\ndef validate(self, item):\nif item in self.items:\n# print('coordinate in use')\nreturn 1\nelse:\n# print('coordinate available')\nreturn 0\ndef used_coordinates(self):\nprint(self.items)\nreturn self.items\n</code></pre>","tags":["python"]},{"location":"python/#mods","title":"<code>mods/</code>","text":"<p>I wanted to be able to plug these into other games so I put everything in <code>mods/</code></p> <p>in case later I make different themes, like a survival based hunt and gather game, or a crafty creative mode game, etc.</p>","tags":["python"]},{"location":"python/#modsplayerpy","title":"<code>mods/player.py</code>","text":"<p>this tracks the player</p>","tags":["python"]},{"location":"python/#modstreasurepy","title":"<code>mods/treasure.py</code>","text":"<p>games are for winning</p>","tags":["python"]},{"location":"python/#modsdisasterspy","title":"<code>mods/disasters.py</code>","text":"<p>games are less fun if you always win, this is basically a copy of treasure</p>","tags":["python"]},{"location":"python/#modsnarratepy","title":"<code>mods/narrate.py</code>","text":"<p>for giggles</p>","tags":["python"]},{"location":"python/#modsitempy","title":"<code>mods/item.py</code>","text":"<p>the only feature I actually implemented with items is the compass</p> <p>if you find the compass, the map gets drawn</p> <p>the idea with this was to tie it to <code>npcs.py</code> but that hasn't happened yet</p>","tags":["python"]},{"location":"python/#modsnpcpy","title":"<code>mods/npc.py</code>","text":"<p>wip: later I'll do the typical game move, npcs give you quests, to go collect items, and return a reward...</p> <ol> <li> <p>https://docs.python.org/3/library/functions.html#map \u21a9</p> </li> <li> <p>https://docs.python.org/3/tutorial/datastructures.html?highlight=stack#using-lists-as-stacks \u21a9</p> </li> </ol>","tags":["python"]},{"location":"","title":"Home","text":"<p>home workflow template buddhism</p> <p>cheatsheets</p>","tags":["instructions","javascript","python"]},{"location":"#random-island-adventure","title":"random island adventure","text":"<p>this is a retro game I play with to practice python and javascript</p>","tags":["instructions","javascript","python"]},{"location":"#instructions","title":"instructions","text":"<ul> <li>find the treasure, avoid the disaster and don't starve</li> </ul>","tags":["instructions","javascript","python"]},{"location":"#movement","title":"movement","text":"<ul> <li><code>hjkl</code> = <code>\u2190 \u2193 \u2191 \u2192</code>1</li> </ul>","tags":["instructions","javascript","python"]},{"location":"#tips-cheats","title":"tips &amp; cheats","text":"<ul> <li>read the tips in game for more survival tips</li> </ul> <p>play random island adventure online</p> <p>download the python terminal app</p>","tags":["instructions","javascript","python"]},{"location":"#javascript","title":"javascript","text":"<ul> <li>javascript</li> <li>javascript others</li> </ul>","tags":["instructions","javascript","python"]},{"location":"#python","title":"python","text":"<ul> <li>python</li> </ul> <ol> <li> <p>vim arrows since 1976, before the mouse was invented (slowing down human progress forever)\u00a0\u21a9</p> </li> </ol>","tags":["instructions","javascript","python"]}]}